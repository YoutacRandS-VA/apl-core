configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    users.anonymous.enabled: false
    application.instanceLabelKey: argocd.argoproj.io/instance
    oidc.config: |
      name: keycloak
      issuer: {{ $v._derived.oidcBaseUrl }}
      clientID: {{ $k.idp.clientID }}
      clientSecret: '$oidc.clientSecret'
      requestedScopes:
        - openid
        - profile
        - email
        - groups
      requestedIDTokenClaims:
        groups:
          essential: true
      {{- if $v._derived.untrustedCA }}
      rootCA: | {{- $v._derived.caCert | nindent 8 }}
      {{- end }}
  params:
    # -- Create the argocd-cmd-params-cm configmap
    # If false, it is expected the configmap will be created by something else.
    create: true
    server.insecure: true # nginx terminates tls
    # -- Annotations to be added to the argocd-cmd-params-cm ConfigMap
    annotations: {}

  # Argo CD RBAC policy configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    create: true
    policy.csv: |
      # image updater
      p, role:image-updater, applications, get, */*, allow
      p, role:image-updater, applications, update, */*, allow
      g, image-updater, role:image-updater
      # admin
      g, admin, role:admin
      {{- if not $v.otomi.isMultitenant }}
      # not multitenant, make team-admin admin and keep global read-only
      g, team-admin, role:admin
      {{- end }}
    scopes: "[groups]"
    
    {{- if $v.otomi.isMultitenant }}
    policy.default: ''
    {{- else }}
    policy.default: role:readonly
    {{- end }}

applicationSet:
  # -- Enable ApplicationSet controller
  enabled: true
  # -- Resource limits and requests for the ApplicationSet controller pods.
  resources:
    limits:
      cpu: '500m'
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256M

controller:
  resources:
    {{- with $a | get "resources.controller" nil }}
      {{- toYaml .| nindent 4 }}
    {{- else }}
    limits:
      cpu: 1
      memory: 3Gi
    requests:
      cpu: 100m
      memory: 1Gi
    {{- end }}
  volumeMounts:
    - name: custom-ca
      mountPath: /etc/ssl/certs/custom-ca-certificates.crt
      subPath: custom-ca-certificates.crt
  volumes:
    - name: custom-ca
      secret:
        defaultMode: 420
        secretName: custom-ca
  # Repository TLS certificates
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca
  tls:
    annotations: {}
    certificates: 
      gitea.{{ $v.cluster.domainSuffix }}: |
        {{- .Values._derived.caCert | nindent 8 }}

redis:
  resources:
    {{- with $a | get "resources.redis" nil }}
      {{- toYaml .| nindent 4 }}
    {{- else }}
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256M
    {{- end }}
